import prisma from "@/lib/prisma";
// import Link from "next/link";

import TaskDatasetInfo from "./components/TaskDatasetInfo";
import TaskModelInfo from "./components/TaskModelInfo";
// import ResultTable from "./components/ResultTable";
// import { EyeIcon, ScaleIcon } from "@heroicons/react/24/solid";

export default async function TaskDisplayPage({ params }) {
  // TODO: fetch task info by id
  const taskId = parseInt(params.id);

  const task = await prisma.task.findUnique({
    where: {
      id: taskId,
    },
    include: {
      dataset: true,
      models: true,
    },
  });

  const dataset = task.dataset;
  const models = task.models;
  const taskName = task.taskName;
  const startTime = task.startTime.toLocaleString();

  // TODO: 客观测试 主观测试, 对抗测试
  // const method = "客观测试";

  // TODO
  // let currentProgress = "";
  // if (type == 0) {
  //   currentProgress =
  //     '正在测试第x/xx条问题: "The cyclic subgroup of Z_24 generated by 18 has ......, 已用时xx秒';
  // } else if (type == 1) {
  //   currentProgress = "已经主观测试了x/xx题,";
  // } else if (type == 2) {
  //   currentProgress = "已经对抗测试了x/xx题,";
  // }

  return (
    <div className="flex w-full flex-col space-y-5">
      <h1 className=" font-mono text-4xl font-bold text-primary">{taskName}</h1>
      <div>
        <progress
          className="progress h-3 w-full"
          value="70"
          max="100"
        ></progress>
        <p className="text-gray-500">
          TODO: currentProgress, something like 正在测试第x/xx条问题: &quot;The
          cyclic subgroup of Z_24 generated by 18 has ......, 已用时xx秒
        </p>
        <p className="text-gray-500">{startTime}开始</p>
      </div>

      {/* TODO */}
      <p>TODO:主观测试与对抗测试跳转 </p>
      {/* {type == 1 && (
        <Link
          href={`${testingId}/human-evaluation`}
          className="btn btn-accent w-max rounded-3xl"
        >
          <EyeIcon className="mr-2 h-5 w-5" />
          继续主观测试
        </Link>
      )}

      {type == 2 && (
        <Link
          href={`${testingId}/comparative-evaluation`}
          className="btn btn-accent w-max rounded-3xl"
        >
          <ScaleIcon className="mr-2 h-5 w-5" />
          继续对抗测试
        </Link>
      )} */}

      <h2 className="text-2xl font-bold">数据集</h2>
      <TaskDatasetInfo dataset={dataset} />
      <h2 className="text-2xl font-bold">模型</h2>
      {models.map((model) => (
        <TaskModelInfo model={model} key={model.id} />
      ))}
      <h2 className="text-2xl font-bold">已完成测试的模型</h2>
      TODO
      {/* <ResultTable type={type} />
      <ResultTable type={type} /> */}
    </div>
  );
}
