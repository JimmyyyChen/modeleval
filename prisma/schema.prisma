// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Testing {
  id                 Int       @id @default(autoincrement())
  userId             String
  name               String
  sizeInMB           Float
  startTime          DateTime
  endTime            DateTime?
  taskCount          Int
  completedTaskCount Int
  type               String
}

model Label {
  labelid       Int      @id @default(autoincrement())
  labelName     String   @unique
  Model         Model?   @relation(fields: [modelsModelid], references: [modelid])
  Dataset       Dataset? @relation(fields: [datasetId], references: [id])
  modelsModelid Int?
  datasetId     Int?
}

model Model {
  modelid     Int       @id @default(autoincrement())
  modelName   String    @unique
  label_list  Label[]
  description String    @default("this is a model for testing")
  downloadN   Int       @default(0)
  likeN       Int       @default(0)
  Tasks       Task[]
  Comment     Comment[]
}

model Dataset {
  id                   Int                   @id @default(autoincrement())
  datasetName          String
  description          String                @default("this is a dataset for testing")
  sizeInMB             Float
  lastUpdate           DateTime
  starCount            Int                   @default(0)
  downloadCount        Int                   @default(0)
  label_list           Label[]
  questionType         Boolean               @default(false) // 0: choice, 1: short answer
  ChoiceQuestions      ChoiceQuestion[]
  ShortAnswerQuestions ShortAnswerQuestion[]
  userId               String // the user who upload the dataset,get from auth() in CLERK
  Tasks                Task[]
  Comment              Comment[]
}

model ChoiceQuestion {
  id            Int      @id @default(autoincrement())
  question      String   @db.Text
  choices       Choice[]
  correctAnswer String
  Dataset       Dataset? @relation(fields: [datasetId], references: [id])
  datasetId     Int?
}

model ShortAnswerQuestion {
  id           Int      @id @default(autoincrement())
  question     String   @db.Text
  sampleAnswer String   @db.Text
  Dataset      Dataset? @relation(fields: [datasetId], references: [id])
  datasetId    Int?
}

model Choice {
  id               Int             @id @default(autoincrement())
  content          String          @db.Text
  ChoiceQuestion   ChoiceQuestion? @relation(fields: [choiceQuestionId], references: [id])
  choiceQuestionId Int?
}

model Task {
  id           Int       @id @default(autoincrement())
  userId       String
  taskName     String
  startTime    DateTime  @default(now())
  endTime      DateTime?
  questionType Int // 0: ChoiceQuestion, 1: ShortAnswerQuestion
  modelIds     Json
  models       Model[]
  datasetId    Int
  dataset      Dataset   @relation(fields: [datasetId], references: [id])
  answerjson   Json      @default("{}")
  state        Int // 0: not start, 1: running, 2: paused, 3: finished
  progress     Float
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  //likeN   Int    @default(0)        //暂时不开发这项功能
  commentTime DateTime @default(now())
  lastUpdate  DateTime @default(now())
  type        Int // 0: model, 1: dataset,maybe add 2: task,3:user in the future
  model       Model?   @relation(fields: [modelId], references: [modelid])
  modelId     Int?
  dataset     Dataset? @relation(fields: [datasetId], references: [id])
  datasetId   Int?
  userId      String
}
