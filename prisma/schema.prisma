// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Label {
  labelid       Int      @id @default(autoincrement())
  labelName     String
  Model         Model?   @relation(fields: [modelsModelid], references: [modelid])
  Dataset       Dataset? @relation(fields: [datasetId], references: [id])
  modelsModelid Int?
  datasetId     Int?
}

model Model {
  modelid               Int       @id @default(autoincrement())
  modelName             String    @unique
  label_list            Label[]
  description           String    @default("this is a model for testing")
  Introduction          String    @default("this is a default introduction for model")
  Usage                 String    @default("this is a default usage for model")
  AdditionalInformation String    @default("this is a default additional information for model")
  downloadCount         Int       @default(0)
  lastUpdate            DateTime  @default(now())
  starCount             Int       @default(0)
  starUser              User[]
  Tasks                 Task[]
  Comment               Comment[]
  ScoreObj              Float     @default(0.0) // 平均客观题得分
  ScoreSub              Float     @default(0.0) // 平均主观题得分
}

model Dataset {
  id                   Int                   @id @default(autoincrement())
  datasetName          String
  repeatNames          Int                   @default(0)
  description          String                @default("this is a dataset for task")
  sizeInMB             Float
  lastUpdate           DateTime
  starCount            Int                   @default(0)
  starUser             User[]                @relation("StarUserRelation")
  downloadUser         User[]                @relation("DownloadUserRelation")
  downloadCount        Int                   @default(0)
  label_list           Label[]
  questionType         Int // 0: choice, 1: short answer
  ChoiceQuestions      ChoiceQuestion[]
  ShortAnswerQuestions ShortAnswerQuestion[]
  userId               String // the user who upload the dataset,get from auth() in CLERK
  username             String                @default("Administrator")
  Tasks                Task[]
  Comment              Comment[]
}

model User {
  id           Int      @id @default(autoincrement())
  username     String
  userImageUrl String   @default("")
  userId       String
  Dataset1     Dataset? @relation("DownloadUserRelation", fields: [datasetId1], references: [id])
  datasetId1   Int?
  Dataset2     Dataset? @relation("StarUserRelation", fields: [datasetId2], references: [id])
  datasetId2   Int?
  Model        Model?   @relation(fields: [modelModelid], references: [modelid])
  modelModelid Int?
  Comment      Comment? @relation(fields: [commentId], references: [id])
  commentId    Int?
}

model ChoiceQuestion {
  id            Int      @id @default(autoincrement())
  question      String   @db.Text
  choices       Choice[]
  correctAnswer String
  Dataset       Dataset? @relation(fields: [datasetId], references: [id])
  datasetId     Int?
}

model ShortAnswerQuestion {
  id           Int      @id @default(autoincrement())
  question     String   @db.Text
  sampleAnswer String   @db.Text
  Dataset      Dataset? @relation(fields: [datasetId], references: [id])
  datasetId    Int?
}

model Choice {
  id               Int             @id @default(autoincrement())
  content          String          @db.Text
  ChoiceQuestion   ChoiceQuestion? @relation(fields: [choiceQuestionId], references: [id])
  choiceQuestionId Int?
}

model Task {
  id               Int       @id @default(autoincrement())
  userId           String
  taskName         String
  startTime        DateTime  @default(now())
  endTime          DateTime?
  questionType     Int // 0: ChoiceQuestion, 1: ShortAnswerQuestion
  modelIds         Json
  models           Model[]
  datasetId        Int
  dataset          Dataset   @relation(fields: [datasetId], references: [id])
  state            Int       @default(0) // 0: not start, 1: running, 2: paused, 3: finished
  progress         Float     @default(0)
  answerjson       Json      @default("{}") // 需要更新
  scoresjson       Json      @default("{}") // 需要更新
  modelscoreIdjson Json      @default("{}") // 不需要改 
}

model Score {
  id           Int   @id @default(autoincrement())
  taskId       Int
  score        Float @default(0.0)
  scoreType    Int // 0: obj, 1: sub, 2: adversarial
  modelId      Int
  datasetId    Int
  progress     Int   @default(0) // 仅用于主观测试和对抗性测试，用于记录用户判断了多少道题
  correctCount Int   @default(0) // 回答正确的条目数
  totalCount   Int   @default(0) // 对应的数据集中问题数量
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  reply       Int      @default(-1) // -1: no reply, else: reply to the comment with id = reply
  //likeN   Int    @default(0)        //暂时不开发这项功能
  commentTime DateTime @default(now())
  lastUpdate  DateTime @default(now())
  type        Int // 0: model, 1: dataset,maybe add 2: task,3:user in the future
  model       Model?   @relation(fields: [modelId], references: [modelid])
  modelId     Int?
  dataset     Dataset? @relation(fields: [datasetId], references: [id])
  datasetId   Int?
  user        User[]
}
